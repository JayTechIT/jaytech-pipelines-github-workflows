on:  
  workflow_call:
    inputs:
      namespace:
        type: string
        description: The application name (repository name without api/contract/ui)
        required: true
      dotnet-version:
        type: string
        description: Specify which .NET version to use
        required: false
        default: "7.x"
      spectral-validation:
        type: boolean
        description: Validate the contract against JayTech's spectral rules?
        default: true
    secrets:
      pat-github:
        description: GitHub PAT
        required: true
      azure-api-key:
        description: The Azure API key
        required: false
      azure-source:
        description: The Azure Artifacts Source
        required: false
      azure-feed:
        description: The Azure Artifacts Feed
        required: false
jobs:
  build-push-oas:
    name: Build + NuGet push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.pat-github }}
          path: workflow/repository
          fetch-depth: 0
      - name: Checkout JayTech actions
        uses: actions/checkout@v3
        with:
          ref: master
          repository: JayTechIT/jaytech-pipelines-github-actions
          token: ${{ secrets.pat-github }}
          path: workflow/actions
      - name: Add Azure feed
        shell: bash
        run: dotnet nuget add source ${{ secrets.azure-feed }} --name ${{secrets.azure-source}} --username az --password ${{ secrets.azure-api-key }} --store-password-in-clear-text 
      - id: semver
        name: Determine semantic version
        uses: ./workflow/actions/gitversion-semver
      - name: Set contract version
        run: sed -i "s/{{OAS_VERSION}}/${{ steps.semver.outputs.semantic-version }}/g" ./workflow/repository/src/oas.yaml
      - if: ${{ inputs.spectral-validation == true }}
        name: Validate spectral
        run: |
          npm install -g @stoplight/spectral
          spectral lint ./workflow/repository/src/oas.yaml -r https://spectral.jaytech.nl/spectral-ruleset.yaml          
      - name: Checkout client generator
        uses: actions/checkout@v3
        with:
          repository: JayTechIT/jaytech-tools-clis-generators-client
          token: ${{ secrets.pat-github }}
          path: workflow/client-generator
          fetch-depth: 0
      - name: Run Client Generator
        shell: bash
        run: |
          sed -i "s~{{IN}}~../../../../../workflow/repository/src/oas.yaml~g" ./workflow/client-generator/Source/Assemblies/JayTech.Tools.ClientGeneration/Properties/launchSettings.json
          sed -i "s~{{OUT}}~../../../../../workflow/repository/generated~g" ./workflow/client-generator/Source/Assemblies/JayTech.Tools.ClientGeneration/Properties/launchSettings.json
          sed -i "s~{{NAMESPACE}}~${{inputs.namespace}}~g" ./workflow/client-generator/Source/Assemblies/JayTech.Tools.ClientGeneration/Properties/launchSettings.json
          cd ./workflow/client-generator/Source/Assemblies/JayTech.Tools.ClientGeneration
          dotnet run --launch-profile Production
          ls -A
      # - name: nuget-push
      #   uses: ./workflow/actions/dotnet-publish-nuget
      #   with:
      #     software-version: ${{ steps.semver.outputs.semantic-version }}
      #     project-folder: ./workflow/repository/generated
      #     azure-api-key: ${{secrets.azure-api-key}}
      #     azure-source: ${{secrets.azure-source}}
      #     azure-feed: ${{secrets.azure-feed}}
      #     add-source: "false"
      #     dotnet-version: ${{inputs.dotnet-version}}
      - name: Tag & Release
        uses: actions/create-release@v1                
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.semver.outputs.semantic-version }}
          tag_name: ${{ steps.semver.outputs.semantic-version }}     
        env:
          GITHUB_TOKEN: ${{ secrets.pat-github }}
      - name: Install jq
        if: github.ref == 'refs/heads/master'
        run: sudo apt-get install -y jq
      - name: Clean up prerelease versions
        if: github.ref == 'refs/heads/master'
        run: |
          # User parameters
          owner="${{ github.repository_owner }}"
          repo="${{ github.repository }}"
          repo_name=$(echo $repo | cut -d'/' -f2)
          token="${{ secrets.pat-github }}"
          specifiedVersion="${{ steps.semver.outputs.semantic-version }}"

          # Function to determine if a tag is a pre-release version of the specified base version
          is_pre_release_version() {
              tag=$1
              baseVersion=$2

              # Normalize the tag to remove a leading 'v' and check if it starts with the base version followed by a hyphen
              normalizedTag=$(echo "$tag" | sed 's/^v//')
              [[ $normalizedTag =~ ^$baseVersion- ]]
          }

          # GitHub API headers
          headers="Authorization: token $token
          Accept: application/vnd.github.v3+json"

          # Base URI for GitHub API
          baseUri="https://api.github.com/repos/$owner/$repo_name"

          # Get all tags
          tags=$(curl -s -H "$headers" "$baseUri/tags")

          echo $headers

          echo $tags

          echo $repo_name

          # Ensure tags is valid JSON
          if ! echo "$tags" | jq empty; then
              echo "Failed to fetch tags or invalid JSON received."
              exit 1
          fi

          echo "$tags" | jq -c '.[]' | while read -r tag; do
          tagName=$(echo "$tag" | jq -r '.name')
          if is_pre_release_version "$tagName" "$specifiedVersion"; then
              # Get the release by tag name
              releaseUri="$baseUri/releases/tags/$tagName"
              release=$(curl -s -H "$headers" "$releaseUri")
              releaseId=$(echo "$release" | jq -r '.id')

              if [ "$releaseId" != "null" ]; then
                  # Delete the release
                  curl -s -X DELETE -H "$headers" "$baseUri/releases/$releaseId"
                  echo "Deleted release $(echo "$release" | jq -r '.name')"
              else
                  echo "No release found for tag $tagName or it might already be deleted."
              fi

              # Delete the tag reference
              curl -s -X DELETE -H "$headers" "$baseUri/git/refs/tags/$tagName"
              echo "Deleted tag $tagName"
          fi

          done

