on:
  workflow_call:
    inputs:
      application-name:
        type: string
        description: The application name (repository name without api/contract/ui)
        required: true
      build-android:
        type: boolean
        description: Build Quasar in android mode?
        required: false
        default: false
      build-electron:
        type: boolean
        description: Build Quasar in Electron mode?
        required: false
        default: false
      build-ios:
        type: boolean
        description: Build Quasar in iOS mode?
        required: false
        default: false
      build-web:
        type: boolean
        description: Build Quasar in web mode?
        required: false
        default: true
      environment-name:
        type: string
        description: The keyword used to define your environment repository
        required: false
        default: environment
      replacements-in:
        type: string
        description: Replacement placeholders separated by a semicolon (;)
        required: false
        default: ""
      source-folder:
        type: string
        description: Root folder of the source code
        required: false
        default: "./workflow/repository"
    secrets:
      key-store-password:
        description: The keystore password
        required: true
      pat-github:
        description: GitHub PAT
        required: true
      replacements-out:
        description: Replacement values separated by a semicolon (;)
        required: false

jobs:
  preparations:
    name: Quasar Preparations
    runs-on: ubuntu-latest
    outputs:
      semantic-version: ${{ steps.semver.outputs.semantic-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{inputs.repository}}
          token: ${{ secrets.pat-github }}
          path: workflow/repository
          fetch-depth: 0
      - name: Checkout JayTech actions
        uses: actions/checkout@v3
        with:
          ref: master
          repository: JayTechIT/jaytech-pipelines-github-actions
          token: ${{ secrets.pat-github }}
          path: workflow/actions
      - name: Replace placeholders
        uses: ./workflow/actions/replace-placeholders
        with:
          replacements-in: ${{inputs.replacements-in}}
          replacements-out: ${{secrets.replacements-out}}
      - id: semver
        uses: ./workflow/actions/gitversion-semver
      - if: ${{inputs.build-android}}
        name: Replace {{APP_VERSION}}
        uses: ./workflow/actions/replace-placeholders
        with:
          replacements-in: "{{APP_VERSION}}"
          replacements-out: ${{ steps.semver.outputs.semantic-version }}
      - name: Upload prepared repository
        uses: actions/upload-artifact@v3
        with:
          name: workflow
          path: workflow
          retention-days: 2

  build-web:
    if: ${{inputs.build-web}}
    needs: preparations
    name: Build Quasar Web
    runs-on: ubuntu-latest
    steps:
      - name: Download prepared repository
        uses: actions/download-artifact@v3
        with:
          name: workflow
          path: workflow
      - name: Quasar Build Web
        uses: ./workflow/actions/quasar-build-web
        with:
          folder: ${{inputs.source-folder}}

  build-android:
    needs: preparations
    name: Build Quasar Android
    runs-on: ubuntu-latest
    steps:
      - if: ${{inputs.build-android}}
        name: Download prepared repository
        uses: actions/download-artifact@v3
        with:
          name: workflow
          path: workflow
      - if: ${{inputs.build-android}}
        name: Quasar Build Android
        uses: ./workflow/actions/quasar-build-android
        with:
          app-name: ${{inputs.application-name}}
          folder: ${{inputs.source-folder}}
          key-store-password: ${{secrets.key-store-password}}

  sync-environment-repository:
    needs: [preparations, build-android, build-web]
    name: Sync Environment Repository
    runs-on: ubuntu-latest
    steps:
      - name: Download prepared repository
        uses: actions/download-artifact@v3
        with:
          name: workflow
          path: workflow
      - name: Checkout JayTech actions
        uses: actions/checkout@v3
        with:
          ref: master
          repository: JayTechIT/jaytech-pipelines-github-actions
          token: ${{ secrets.pat-github }}
          path: workflow/actions
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ needs.preparations.outputs.semantic-version }}
          tag_name: ${{ needs.preparations.outputs.semantic-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.pat-github }}
      - if: ${{inputs.build-web}}
        name: Download WEB package
        uses: actions/download-artifact@v3
        with:
          name: quasar-build-web
          path: ./output/web
      - if: ${{inputs.build-web}}
        name: TAR WEB
        run: |
          tar -czvf ./output/web/quasar-web.tar.gz ./output/web/*
      - if: ${{inputs.build-web}}
        name: Upload quasar-web to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.pat-github }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/web/quasar-web.tar.gz
          asset_name: quasar-web.tar.gz
          asset_content_type: application/gzip
      - if: ${{inputs.build-android}}
        name: Download WEB package
        uses: actions/download-artifact@v3
        with:
          name: quasar-build-android
          path: ./output/android
      - if: ${{inputs.build-android}}
        name: TAR WEB
        run: |
          tar -czvf ./output/android/quasar-android.tar.gz ./output/android/*
      - if: ${{inputs.build-android}}
        name: Upload quasar-android to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.pat-github }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/android/quasar-android.tar.gz
          asset_name: quasar-android.tar.gz
          asset_content_type: application/gzip
      - name: Checkout GitOps
        uses: actions/checkout@v3
        with:
          ref: "development"
          repository: ${{ github.repository_owner }}/${{ inputs.application-name }}-${{inputs.environment-name}}
          token: ${{secrets.pat-github}}
          path: workflow/gitops
      - name: Set GitOps version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: "./workflow/gitops/version-ui.yml"
          propertyPath: "version"
          value: ${{ needs.preparations.outputs.semantic-version }}
          commitChange: false
          updateFile: true
      - name: Push to GitOps
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          API_TOKEN_GITHUB: ${{ secrets.pat-github }}
        with:
          source-directory: workflow/gitops
          destination-github-username: ${{ github.repository_owner }}
          destination-repository-name: ${{ inputs.application-name }}-${{inputs.environment-name}}
          commit-message: "[UI-v${{ needs.preparations.outputs.semantic-version }}] - ${{ github.event.head_commit.message }}"
          target-branch: development
      - name: Clean Prerelease Versions
        if: github.ref == 'refs/heads/master'
        uses: ./workflow/actions/github-clean-prerelease-versions
        with:
          repo: ${{ github.repository }}
          token: ${{ secrets.pat-github }}
          specifiedVersion: ${{ needs.preparations.outputs.semantic-version }}

  clean-up:
    name: Clean Up Old Tags and Releases
    runs-on: ubuntu-latest
    needs: [sync-environment-repository]
    steps:
      - name: Get Tags
        id: get_tags
        run: |
          curl -s -H "Authorization: token ${{ secrets.pat-github }}" \
            https://api.github.com/repos/${{ github.repository }}/tags \
            | jq -r '.[] | .name' > tags.txt

      - name: Get Releases
        id: get_releases
        run: |
          curl -s -H "Authorization: token ${{ secrets.pat-github }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            | jq -r '.[] | .tag_name' > releases.txt

      - name: Keep only the latest 10 tags and releases
        id: clean_up
        run: |
          # Get all tags and releases
          TAGS=$(cat tags.txt)
          RELEASES=$(cat releases.txt)

          # Get the 10 most recent tags and releases
          KEEP_TAGS=$(echo "$TAGS" | head -10)
          KEEP_RELEASES=$(echo "$RELEASES" | head -10)

          # Loop through the tags and delete any older ones beyond the 10 most recent
          for tag in $(echo "$TAGS" | tail -n +11); do
            echo "Deleting tag: $tag"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.pat-github }}" \
              https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag
          done

          # Loop through the releases and delete any older ones beyond the 10 most recent
          for release in $(echo "$RELEASES" | tail -n +11); do
            echo "Deleting release: $release"
            RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.pat-github }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$release \
              | jq -r '.id')
            curl -s -X DELETE -H "Authorization: token ${{ secrets.pat-github }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          done
